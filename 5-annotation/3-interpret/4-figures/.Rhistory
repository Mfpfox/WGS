createScatterPlot <- function(dataframe) {
# filter for gnomad missense only
dataframe <- dataframe %>% filter(Database %in% c("gnomAD & ClinVar", "gnomAD"))
# Create hover text
dataframe$hoverText <- paste( "<br>Description= ", dataframe$Description,
"<br>Individuals with Samples= ", dataframe$Individuals,
"<br>Sex= ", dataframe$Sex,
"<br>ClinVar= ", dataframe$myClinVarLabels,
"<br>Mechanism= ", dataframe$LABEL,
"<br>AF= ", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt= ",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>SIFT= ", dataframe$SIFT,
"<br>PolyPhen= ", dataframe$PolyPhen
)
# Plot
plot_ly(data = dataframe,
x = ~Missense.Change,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~myClinVarLabels,
# alpha=0.085,
size=~Individuals,
text = ~hoverText,
hoverinfo = "text") %>%
#marker = list(size = 10))
layout(title = "Scatter plot of AF vs Missense Type",
xaxis = list(title = "Missense"),
yaxis = list(title = "Population Allele Frequency"))
}
createScatterPlot(missense_df)
missense_path <- "data/NOTCH3_missense_REFERENCE_with_AA_level_annotations_miscast_gnomadv211_cv20230430_v2.csv"
missense2_path <- "data/Curated_NOTCH3_missense_REFERENCE_with_miscast_AA_level.csv"
df <- read_csv(missense_path)
curated_df <- read_csv(missense2_path)
sort_dataframe_by_pos <- function(df) {
# Check if 'pos' column exists in the dataframe
if(!"pos" %in% names(df)) {
stop("The dataframe does not contain a 'pos' column.", call. = FALSE)
}
# Sorting the dataframe by 'pos' column
sorted_df <- df[order(df$pos), ]
return(sorted_df)
}
df <- sort_dataframe_by_pos(df)
curated_df <- sort_dataframe_by_pos(curated_df)
head(curated_df)
# Curated.Missense, keyID37aa, myClinVarLabels,
missense_path <- "data/NOTCH3_missense_REFERENCE_with_AA_level_annotations_miscast_gnomadv211_cv20230430_v2.csv"
curated_path <- "data/Curated_NOTCH3_missense_REFERENCE_with_miscast_AA_level.csv"
missense_df <- read_csv(missense_path)
curated_df <- read_csv(curated_path)
sort_dataframe_by_pos <- function(df) {
# Check if 'pos' column exists in the dataframe
if(!"pos" %in% names(df)) {
stop("The dataframe does not contain a 'pos' column.", call. = FALSE)
}
# Sorting the dataframe by 'pos' column
sorted_df <- df[order(df$pos), ]
return(sorted_df)
}
missense_df <- sort_dataframe_by_pos(missense_df)
curated_df <- sort_dataframe_by_pos(curated_df)
head(missense_df)
head(curated_df)
# Curated.Missense, keyID37aa, myClinVarLabels,
library(gplots)
library(grDevices)
library(tibble)
library(filesstrings)
library(grid)
library(gridExtra)
library(XML)
library(xlsx)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
library(plotly) # interactive plots
library(tidyr)
library(readr)
library(dplyr)
missense_path <- "data/NOTCH3_missense_REFERENCE_with_AA_level_annotations_miscast_gnomadv211_cv20230430_v2.csv"
curated_path <- "data/Curated_NOTCH3_missense_REFERENCE_with_miscast_AA_level.csv"
missense_df <- read_csv(missense_path)
curated_df <- read_csv(curated_path)
sort_dataframe_by_pos <- function(df) {
# Check if 'pos' column exists in the dataframe
if(!"pos" %in% names(df)) {
stop("The dataframe does not contain a 'pos' column.", call. = FALSE)
}
# Sorting the dataframe by 'pos' column
sorted_df <- df[order(df$pos), ]
return(sorted_df)
}
missense_df <- sort_dataframe_by_pos(missense_df)
curated_df <- sort_dataframe_by_pos(curated_df)
head(missense_df)
head(curated_df)
# Curated.Missense, keyID37aa, myClinVarLabels,
summary(curated_df)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# filter for gnomad missense only
dataframe <- dataframe %>% filter(Database %in% c("gnomAD & ClinVar", "gnomAD"))
# Create hover text
dataframe$hoverText <- paste( "<br>Description= ", dataframe$Description,
"<br>Individuals with Samples= ", dataframe$Individuals,
"<br>Sex= ", dataframe$Sex,
"<br>ClinVar= ", dataframe$myClinVarLabels,
"<br>Mechanism= ", dataframe$LABEL,
"<br>AF= ", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt= ",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>SIFT= ", dataframe$SIFT,
"<br>PolyPhen= ", dataframe$PolyPhen
)
# Plot
plot_ly(data = dataframe,
x = ~Missense.Change,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~myClinVarLabels,
# alpha=0.085,
size=~Individuals,
text = ~hoverText,
hoverinfo = "text") %>%
#marker = list(size = 10))
layout(title = "Scatter plot of AF vs Missense Type",
xaxis = list(title = "Missense"),
yaxis = list(title = "Population Allele Frequency"))
}
createScatterPlot(missense_df)
createScatterPlot(curated_df)
# Function to create a scatter plot
createScatterPlot2 <- function(dataframe) {
# Create hover text
dataframe$hoverText <- paste( "<br>Description= ", dataframe$Description,
"<br>Individuals with Samples= ", dataframe$Individuals,
"<br>Sex= ", dataframe$Sex,
"<br>ClinVar= ", dataframe$myClinVarLabels,
"<br>Mechanism= ", dataframe$LABEL,
"<br>AF= ", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt= ",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>SIFT= ", dataframe$SIFT,
"<br>PolyPhen= ", dataframe$PolyPhen
)
# Plot
plot_ly(data = dataframe,
x = ~ClinicalSignificance,
y = ~pos,
type = 'scatter',
mode = 'markers',
color = ~clinvarAA,
# alpha=0.085,
size=~Individuals,
text = ~hoverText,
hoverinfo = "text") %>%
# marker = list(size = 10)) %>%
layout(title = "Scatter plot of ClinVar Significance vs Missense protein position",
xaxis = list(title = "Clinical Significance"),
yaxis = list(title = "Position"))
}
#createScatterPlot(missense_df)
createScatterPlot2(curated_df)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHOGENIC", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
#"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"))
}
createScatterPlot(df)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHOGENIC", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
#"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"))
}
createScatterPlot(missense_df)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHOGENIC", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
#"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
print(head(dataframe))
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"))
}
createScatterPlot(missense_df)
unique(missense_df$myClinVarLabels)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
#"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
print(head(dataframe))
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"))
}
createScatterPlot(missense_df)
# Function to create a scatter plot
createScatterPlot <- function(file_path) {
dataframe <- read_csv(file_path)
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"),
colorway = c("red", "green", "purple", "blue"))
}
# Example usage
# Assume `df` is your dataframe containing the necessary columns.
file_path <- "Data/NOTCH3_missense_AA_levels_REF_gnomadv211_cv20230430_curatedCollection18_v2.csv"
createScatterPlot(file_path)
# Function to create a scatter plot
createScatterPlot <- function(file_path) {
dataframe <- read_csv(file_path)
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"),
colorway = c("red", "green", "purple", "blue"))
}
# Example usage
# Assume `df` is your dataframe containing the necessary columns.
file_path <- "data/NOTCH3_missense_AA_levels_REF_gnomadv211_cv20230430_curatedCollection18_v2.csv"
createScatterPlot(file_path)
# Function to create a scatter plot
createScatterPlot <- function(file_path) {
dataframe <- read_csv(file_path)
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"),
colorway = c("red", "green", "purple", "blue"))
}
# Example usage
# Assume `df` is your dataframe containing the necessary columns.
#file_path <- "data/NOTCH3_missense_AA_levels_REF_gnomadv211_cv20230430_curatedCollection18_v2.csv"
file_path <- "data/Curated_NOTCH3_missense_REFERENCE_with_miscast_AA_level.csv"
createScatterPlot(file_path)
# Function to create a scatter plot
createScatterPlot <- function(file_path) {
dataframe <- read_csv(file_path)
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"),
colorway = c("red", "green", "purple", "blue"))
}
# Example usage
# Assume `df` is your dataframe containing the necessary columns.
createScatterPlot(curated_path)
# Function to create a scatter plot
createScatterPlot <- function(dataframe) {
# Define colors for myClinVarLabels categories
colors <- setNames(c("red", "green", "purple", "blue"),
c("PATHO", "VUS", "BENIGN", "OTHER"))
# Map myClinVarLabels to colors, defaulting to "OTHER" for any labels not explicitly defined
dataframe$color <- ifelse(dataframe$myClinVarLabels %in% names(colors),
dataframe$myClinVarLabels, "OTHER")
dataframe$color <- colors[dataframe$color]
# Create hover text
dataframe$hoverText <- paste("AF =", dataframe$AF,
"<br>ratio.nhomalt.over.nhetalt =",
dataframe$ratio.nhomalt.over.nhetalt,
#"<br>DOMAINS =", dataframe$DOMAINS,
"<br>MMseq2_conservation_level =",
dataframe$MMseq2_conservation_level,
"<br>MetalBindSite_Exact =", dataframe$MetalBindSite_Exact,
"<br>DisulfideBond_Exact =", dataframe$DisulfideBond_Exact)
print(head(dataframe))
# Plot
plot_ly(data = dataframe,
x = ~pos,
y = ~AF,
type = 'scatter',
mode = 'markers',
color = ~color,
text = ~hoverText,
hoverinfo = "text",
marker = list(size = 10)) %>%
layout(title = "Scatter plot of AF vs pos",
xaxis = list(title = "position"),
yaxis = list(title = "AF"))
}
createScatterPlot(missense_df)
# Convert 'Domain' column to a factor with levels ordered as they appear in the dataframe
df$Domain <- factor(df$Domain, levels = unique(df$Domain))
# Convert 'Domain' column to a factor with levels ordered as they appear in the dataframe
missense_df$Domain <- factor(missense_df$Domain, levels = unique(missense_df$Domain))
# Creating the box plot
fig <- plot_ly(data = missense_df,
y = ~Domain,
x = ~AF,
type = "box",
marker = list(color = 'lightblue'),
boxpoints = "all")
# Customizing the layout to maintain the specified y-axis order
fig <- fig %>% layout(title = "Box Plot by Domain",
xaxis = list(title = "AF"),
yaxis = list(title = "Domains",
categoryorder = "array",
categoryarray = levels(missense_df$Domain)))
# Display the plot
fig
#summary(missense_df)
names(missense_df)
#summary(curated_df)
names(curated_df)
library(shiny); runApp('shiny-viewExcel.R')
